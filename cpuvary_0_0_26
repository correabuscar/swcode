#!/bin/bash

cd /tmp || cd / #XXX to avoid this spam: shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory

source "/swcode/swcode.bash"

rerunasroot "$@"

if ! is_z575; then
  echo "Not running '$0' on non-Z575" >&2
  sleep 2
  exit 1
fi

shopt -s failglob
#^ fail if no filename matches are found for any glob

#!/bin/bash -il
#^ no good for my .bashrc which still skips non-interactive shell and doesn't set path!

#TODO: do this in Rust instead! get a better sleep resolution too!
#exit 1

#varies the cpu speed to keep the temperature less than MAXTEMP
#increases cpu speed when temp falls below MAXTEMP-THRESH

#if no maxtemp, 90degC(w/o A200 laptop fan on) while compiling virtualbox
#MAXTEMP=79 #with 79 here it hit 86degC once... i need the 2.4-3Ghz range which I'm currently missing! so there's a jump from 2.4 to 3Ghz !!!
#MAXTEMP=84 #74 => chromium compilation(w/o cached hits) takes around 5hours (4h59m, 5h9m)  - can't use this with 3Ghz P1 (only when P0 aka boost is 3Ghz, and P1 is 2.4Ghz) because it reached 90 degC!
#MAXTEMP=60
#^ the temp cpu speed will decrease by one step at; clamped to max 90degC in the 'if' check!
MAXTEMP=78 #new, since 15 april 2018

#25 march 2019, with MAXTEMP=78 THRESH=2 MINTEMP=$(( "$MAXTEMP" - "$THRESH" ))
#Transitions: 18472 MinSeenTemp: 40 MaxSeenTemp: 87 AvgSeentemp: 64.07
#Time spent in script: 38114.5 seconds aka 10 hours 35 minutes 14 seconds.
#1 transition every 2.06 seconds.

#MAXTEMP=65 #new, since 21 may 2018
THRESH=2
MINTEMP=$(( "$MAXTEMP" - "$THRESH" ))
#^ the temp cpu speed will increase by one step at
sleeptime=0.5 #was 1
#echo $MINTEMP
breaklongerlines_every_x_polls=300 #every 300 temperature polls (eg. if sleeptime is 0.2 then that's 1/0.2=5 temp polls per sec, so 300 here means every 300/5 seconds, but this is meant to count the chars not seconds!)
#^ do a newline every 300 seconds

program_name="$(basename "$0")"
program_version=0.0.26  #MAJOR.MIN.PATCH (semver)
#0.0.21 => put back internal keyboard! so don't exceed 65degC to avoid melting the glue that holds the keyboard panes and have it leak onto its contacts and thus prevent the S key from working (which happens at over 90degC)

lockfile="/var/run/${program_name}.lock"

#nameofarg0forexiting="${program_name}_exiting" #when $0 is this, it will just pause&exit instead of running main! (this will avoid pgrep detecting that ${program_name} is still running) - this will run on exit while allowing user to inspect exit screen and at the same time set itself as not running, in the face of pgrep!

bc="/usr/bin/bc"
#if ! which bc >/dev/null 2>&1; then
#  echo 'Command "bc" not found in PATH!'
#  exit 111
#fi
if ! test -x "$bc"; then
  echo "'$bc' not found!"
  exit 111
fi

#no longer using this in 0.0.22
#if ! which cputemp >/dev/null 2>&1; then
#  echo 'Command "cputemp" not found in PATH!'
#  exit 111
#fi
alltempfiles=($(unset GLOBIGNORE; shopt -u globstar nullglob failglob dotglob nocaseglob extglob globasciiranges ; echo /sys/devices/pci*/*/hwmon/hwmon*/temp*_input /sys/devices/virtual/thermal/thermal_zone*/{temp,hwmon*/temp*_input} ))
#^ an array of files separated by spaces
cputemp() {
  #take the top highest temp(from like 3 cpu sensors!):
  temperature="$(( $(cat "$alltempfiles" | sort -u -r | head -1) / 1000 ))"
  #doneTODO: ensure it's not empty and it's a 2 digit number!
  if test -n "$temperature"; then
    if [[ "$temperature" =~ ^[0-9]{2}$ ]]; then
      echo "$temperature"
      return 0
    fi
  fi
  return 1 #aka fail
}

#set_xfce4_terminal_title() {
#   local title="$@"
#   echo -e "\033];${title}\a"
#}

#doneTODO: ensure this script is run as root, OR it becomes root somehow (exec?)
iduser="`id -u`"
if test -n "$iduser"; then
  if test "$iduser" -ne "0"; then
    #XXX: re-execute myself as root (needed for ensure below to work ok, for filefrag to be found!)
    #done: fail before exec, if sudo not found!
    #--- warmup sudo
    echo "Not already root, re-executing myself as root by using sudo(required!)..."
    #we use validate to ask for pwd AND to see if we have sudo! or if pwd failed
    set_xfce4_terminal_title "${program_name} $program_version - AWAITING FOR YOUR INPUT"
    sudo --validate --  #this WILL prompt for password regardless of sudoers settings! thankfully we don't reach this due to rerunasroot and /etc/sudoers.d/50-cpuvary
    ec="$?"
    if test "$ec" -ne 0 ; then
      echo "sudo failed or not found, aborting"
      exit 12
    fi
    #---
    exec sudo -- "$0" "$@"
    #^ the above will exit with 127 if sudo is not found! unless shopt execfail is set (they say) but tested to always exit as such, regardless (btw, shopt -s execfail   sets it to on!)
    echo "Impossibiru"
    exit 3
  fi
else
  echo "epic fail, bailing out!"
  exit 2
fi

set_xfce4_terminal_title "${program_name} $program_version - ensures max temperature stays between (${MINTEMP}..${MAXTEMP}) checks every ${sleeptime}s"

echo "${program_name} $program_version - Varies CPU speed to ensure max temperature stays between (${MINTEMP}..${MAXTEMP}) checks every ${sleeptime}s"
#FIXME: ensure userspace governor is set, or set it
#TODO: get speeds list at program startup, not everytime transition is needed!

if mount|grep -F ' /sys '|grep ro ; then
  echo "/sys is mounted readonly(eg. you've booted archlinux iso and you're inside arch-chroot)" >&2
  echo "attempting to remount,rw or else cpupower governor set will fail ..." >&2
  mount /sys -o remount,rw
fi

if ! mount|grep -F ' /sys '|grep rw ; then
  echo "Warning: /sys is not mounted or isn't mounted rw! Setting governor(at least) will fail via 'cpupower'" >&2
fi

#FIXME: use actual min/max values, not hardcoded ones!
if test 'userspace' != "`cat /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_governor|sort -u`"; then
  echo 'CPU governor userspace not set(for all CPUs?)! Setting now...'
  #sudo -- 
  cpupower --cpu all frequency-set --related --governor userspace --min 800MHz --max 1400MHz
  echo 'Setting lowest speed, to be safe...'
  #echo 800000|sudo tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
  echo 800000 | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
fi

#fixed//: must run this once, to set max cpu speed, otherwise, it won't be able to go any higher even if we tell it so!
#sudo -- 
#cpupower --cpu all frequency-set --related --governor userspace --min 800MHz --max 1400MHz

if test 'userspace' != "`cat /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_governor|sort -u`"; then
  echo 'Failed setting CPU governor to userspace! Aborting!'
  exit 111
fi

#disabling boost (state P0, which is same as P1 in my case when undervolting is in effecct), however 'cpupower frequency-info' still reports yes&yes for boost supported&active! Even when it was 1 (cpuvary 0.0.22 or less) I didn't see any jumps, possibly because governor userspace doesn't allow it? but maybe since boost is enabled it's jumping to it but it just doesn't show it!
echo 0 | sudo tee /sys/devices/system/cpu/cpufreq/boost >/dev/null

#sanity checks
f1="`cat /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_available_frequencies|sort -u|tail -n1`" #ie. "1400000 1300000 1200000 1100000 1000000 900000 800000"
f2="`cat /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_available_frequencies|sort -u|head -1`"
if test "$f1" != "$f2"; then
  echo "$f1"
  echo "$f2"
  echo 'Some cores report different frequencies! Aborting!'
  exit 122
fi
allfreqs=( $f1 )
#^array
#echo "${#allfreqs[@]}"
#7
#echo "${!allfreqs[@]}"
#0 1 2 3 4 5 6
#echo "${allfreqs[@]}"
#1400000 1300000 1200000 1100000 1000000 900000 800000
actualfreqs=(#due to overclocking (user set here!) FIXME: use hardware to get? or dmesg? see 3150_kernel_undervolting.patch
2900000
2800000
2600000
2400000
2200000
2100000
1400000
)
let "maxfreqindex=${#allfreqs[@]} - 1"
#6
let "minfreqindex=0"
#0
#TODO: continue this; and use freq indexes to inc/dec speed and also functions!

transitions=0
timespent_secs=0
secondsundermin=0
secondsinbetween=0 #between min and max (where no transition was needed aka '.')
maxseentemp=0 #must be set to lowest, initially
minseentemp=2000 #must be set to highest, initially
avgseentemp=0 #no need to set! nvm, allowing just in case show_avgseentemp() is ever hit before getting to the code that sets this var!
timestemppolled=0 #always
addedseentemps=0 #always

nothing() {
  echo '(ignored C-c during cleanup - but current subcommand within cleanup() was interrupted!)'
}

show_avgseentemp() {
  #scale is number of digits after the .
  echo "scale=2; $avgseentemp / 1" | $bc -l
}

cleanup() {
  trap nothing SIGINT #required to avoid re-running cleanup AND to prevent it from being interrupted! (individual commands from within cleanup WILL still be interrupted by C-c, but then the next one will be run until cleanup() reaches end!)
  echo
  echo 'Cleanup'
  local prewaittime=5 #seconds
  read -t $prewaittime -s -r -p "Waiting $prewaittime sec to allow a potential glibc installation to finish (press Enter or C-d to skip)" #C-c here now shows: "/home/$USER/bin/${program_name}: line 159: warning: run_pending_traps: recursive invocation while running trap for signal 2"  instead of calling nothing() and it just continues after the 5 seconds elapse!
  echo "Transitions: $transitions MinSeenTemp: $minseentemp MaxSeenTemp: $maxseentemp AvgSeentemp: $(show_avgseentemp)"
  echo -n "Time spent in script: $timespent_secs seconds aka"
#  timespent_secs=29555
#  set -x
  ts_secs_int=$(echo "scale=0; $timespent_secs / 1"|$bc -l)
  mins="$(( ts_secs_int / 60))"
  secs="$(( ts_secs_int - ( mins * 60 )))"
  hours="$(( ts_secs_int / 60 / 60 ))"
  mins="$(( mins - hours * 60 ))"
#  set +x
  if test "0" -ne "$hours"; then
    echo -n " $hours hours"
  fi
  if test "0" -ne "$mins"; then
    echo -n " $mins minutes"
  fi
  if test "0" -ne "$secs"; then
    echo -n " $secs seconds"
  fi
  echo '.'

  if test "0" -lt "$transitions"; then
    echo "1 transition every $( echo "scale=2; $timespent_secs / $transitions"| $bc -l ) seconds."
  fi
  statsfile="$(realpath "${0}").$(echo "${program_version}" | cut -d. -f 1,2 ).stats"
  if ! test -s "$statsfile"; then
    #file doesn't exist; or exists and is empty!
    #XXX: if you change the format of these (eg. add new field) then increase program_version minor, so eg. 0.0.6 becomes 0.1.0 becomes 0.2.0 etc.
    echo -e "ver\tmintemp\tmaxtemp\tminseentemp\tmaxseentemp\tavgseentemp\ttimestemppolled\tsleepsecs\ttransitions\tspentsecs\tsecsundermin\tsecsinbetween\tstartdate\texitdate" >> "$statsfile"
    #^ still using '>>' just in case the test above is bugged which will overwrite existing file with contents when using just '>'
  fi
  exitdate="$(date)"
  echo -e "$program_version\t$MINTEMP\t$MAXTEMP\t${minseentemp}\t${maxseentemp}\t$(show_avgseentemp)\t${timestemppolled}\t$sleeptime\t${transitions}\t${timespent_secs}\t${secondsundermin}\t${secondsinbetween}\t${startdate}\t${exitdate}" >> "$statsfile"
  echo
  #FIXME: use actual min/max values, not hardcoded ones!
  echo 'Setting lowest speed, to be safe...'
  cpupower --cpu all frequency-set --related --governor userspace --min 800MHz --max 1400MHz
  #XXX: need this ^ too because --min is 900Mhz sometimes!
  echo 800000 | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null

  sudo -K
#  echo "Sleeping for 10 sec"
#  sleep 10
  trap - EXIT SIGINT  #doneTODO: find out if can C-c while in cleanup, and if so, does it re-run it? we don't want it to re-run!
  #exec -a "$nameofarg0forexiting" -- "$0" "$@" #XXX: actually I can't use this method due to, in bash, $0 will not be seen set by this!
  #XXX; not hit:
#  exec -- "$nameofarg0forexiting" "$nameofarg0forexiting" #passing it as arg1 instead! aka $1  ; I also made a symlink to run as $0
  #read -r -s -p "Exiting... press Enter key"
  tempexitscript="$(mktemp --tmpdir="/tmp" -t -- XXXXXXXXXX)"
  chmod a+x -- "$tempexitscript"
  cat > "$tempexitscript" <<EOF
#!/bin/bash
echo "This is \\"$0\\" surrogate \\"\$0\\"";
if [[ "\$0" =~ /tmp/ ]]; then  #don't want to accidentally delete the main program itself due to some coding error
  rm -v -- "\$0"
fi
read -r -s -p "Exiting... press Enter key" #while waiting here, 'pgrep ${program_name}' still shows 1 ${program_name} process, but normally when ${program_name} is running there will be 2 ! aka \`pgrep ${program_name}|wc -l\`
echo #empty line needed
EOF
  exec -- "$tempexitscript"  #XXX: script won't continue after this command!
  read -r -s -p "You shouldn't hit this! either way, exiting... press Enter key"
  exit 0
}


startdate=""
#^ must not be in function! or FIXME: declare global?

_setspeed2() {
  local speedwanted="$1"
  if test "$#" -ne "1"; then
    echo
    echo "Expected 1 arg, given $#, as: '$*'"
    echo "Defaulting to lowest speed!"
    speedwanted="800000" #TODO: make this const, and figure it out at runtime
  fi
  echo "$speedwanted" | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
}

setspeed() {
  local speedwanted="$1"
  if test "$#" -ne "1"; then
    echo
    echo "Expected 1 arg, given $#, as: '$*'"
    echo "Defaulting to lowest speed!"
    speedwanted="800000" #TODO: make this const, and figure it out at runtime
  fi
  _setspeed2 "$speedwanted"
  if cat /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed|grep -v -- "$speedwanted" >/dev/null; then
    #here if grep exitcode is non-zero, which means it didn't set the wanted speed!
    #this can happen if ran cpumin or cpumax, aka min&max speeds are the same via eg. cpupower --cpu all frequency-set --related --governor userspace --min 1400MHz --max 1400MHz    OR --min 800MHz --max 800MHz   or any other min=max thing which prevents setting any other speeds!
    local minspeednow
    minspeednow="$(cat /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_min_freq | sort -n|head -1)"
    local maxspeednow
    maxspeednow="$(cat /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_max_freq | sort -n|tail -n1)"
    #if diff /sys/devices/system/cpu/cpufreq/policy0/scaling_m{in,ax}_freq >/dev/null; then
      #if here, diff returned zero exit code meaning min==max
    if test "$minspeednow" -eq "$maxspeednow"; then
      echo -n "~MIN=MAX=$minspeednow"
    fi
    if test "$minspeednow" -gt "$speedwanted"; then
      #set minspeed to speedwanted! else cannot set speedwanted!
      echo -n "~OLDMIN=${minspeednow} NEWMIN=$speedwanted"
      echo "$speedwanted" | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_min_freq >/dev/null
    fi
    if test "$maxspeednow" -lt "$speedwanted"; then
      #set maxspeed to speedwanted! else cannot set speedwanted!
      echo -n "~OLDMAX=${maxspeednow} NEWMAX=$speedwanted"
      echo "$speedwanted" | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_max_freq >/dev/null
    fi
    _setspeed2 "$speedwanted"
    #TODO: verify it was set! else set to min! and exit?
  fi
}


main() {
trap cleanup EXIT SIGINT

startdate="$(date)"

while true; do
  prevtempnow="$tempnow"
  tempnow="$(cputemp)" #note: assumed to be integer! FIXME? cputemp is function now!
  ec="$?"
  if test "$ec" -ne "0"; then
    echo "!! Failed to get temp, switching to min power and waiting 1 sec."
    cpupower --cpu all frequency-set --related --governor userspace --min 800MHz --max 1400MHz
    #XXX: need this ^ too because --min is 900Mhz sometimes!
    echo 800000 | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
    tempnow="$prevtempnow"
    sleep 1
    continue
  fi
  let 'timestemppolled++'
  addedseentemps=$(echo "( $addedseentemps + $tempnow )" | $bc -l)
  avgseentemp=$(echo "$addedseentemps / $timestemppolled" | $bc -l) #this has many digits, eg. 65.92452830188679245283
  if test "$tempnow" -gt "$maxseentemp"; then
    maxseentemp="$tempnow"
    echo -n ">maxseentemp=$(tput setab 1)${maxseentemp}$(tput sgr0)C"
  elif test "$tempnow" -gt "$MAXTEMP"; then #also show temp if over MAXTEMP
    echo -n ">jumpovertemp=[${prevtempnow}-$(tput setab 52)${tempnow}$(tput sgr0)]C" #damn, there's a jump from 83 to 91 degC !! that gfx card temp is so flakey when cpu freq is 2800+; but not so when below(meaning 2700 or less)! now it might be that the gfx temp is updated more often, internally; and the temp really does jump so fast! which is why i'm still including/using it via ~/bin/cputemp script(used only in $program_name v0.0.21 or earlier, 0.0.22+ uses bash function!) which only returns the topmost temp(which would almost always be the gfx card one)
  fi
  if test "$tempnow" -lt "$minseentemp"; then
    minseentemp="$tempnow"
    echo -n "<minseentemp$(tput setab 2)${minseentemp}$(tput sgr0)C"
  fi
#  if test "$avgseentemp" -eq "0"; then
#    avgseentemp="$tempnow"
#  else
#    avgseentemp=$(echo "( $avgseentemp + $tempnow) / 2" | $bc -l) #this is obv. no good!
#  fi
  if test -z "$tempnow"; then
    echo 'Failed getting the temperature!'
    tempnow=100 #assume 100degC
    #exit 1 #XXX: do not exit, eg. during compiling!
  fi
  speednow="$(cat /sys/devices/system/cpu/cpufreq/policy0/scaling_setspeed)"
  if test -z "$speednow"; then
    echo 'Failed getting the current speed'
    exit 2
  fi

  if test "$tempnow" -ge "$MAXTEMP" -o "$tempnow" -ge "90"; then #also don't allow any temp over 90degC (hardcoded)
    #time to decrease CPU speed

    #nextlowerspeed="$( cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies | sed -e 's/.*'"$speednow"' //'|cut -d' ' -f1 )"
    nextlowerspeed="$( cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies|sed -re 's/ +$//g'|tr ' ' '\n'|sort -nr|grep -A1 "$speednow"|tail -n1 )"
    #^ returns same speed if already lowest! otherwise next lower speed in line!

    if test -z "$nextlowerspeed"; then
      echo 'Failed getting the current speed'
      exit 3
    fi

    if test "$speednow" -eq "$nextlowerspeed"; then
#      echo "Already at lowest speed: $speednow"
      echo -n '['
    else
      #echo "$nextlowerspeed" | sudo tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
      setspeed "$nextlowerspeed"
      #echo "$nextlowerspeed" | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
#      echo "Speed decreased to $nextlowerspeed"
      echo -n "<$nextlowerspeed"
      let 'transitions++'
    fi

  else #cpu temp is less than $MAXTEMP

    if test "$tempnow" -le "$MINTEMP"; then
      #time to increase cpu speed
      #    nexthigherspeed="$( cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies | sed -e 's/.*'"$speednow"' //'|cut -d' ' -f1 )"
      #    cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies | sed -re 's/'"800000"'.* //'|cut -d' ' -f7
      nexthigherspeed="$( cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies |sed -re 's/ +$//g'|tr ' ' '\n'|sort -n|grep -A1 "$speednow"|tail -n1 )"
      #^ that sed will clean one empty line

      #FIXedME: find a better way! perhaps array indexes with the freqs as data?
      if test -z "$nexthigherspeed"; then
        echo 'Failed getting the current speed'
        exit 4
      fi

      if test "$speednow" -eq "$nexthigherspeed"; then
#        echo "Already at highest speed: $speednow"
        echo -n ']'
        #let "secondsundermin+=sleeptime"
        secondsundermin=$(echo "$secondsundermin + $sleeptime"|$bc -l)
      else
        #echo "$nexthigherspeed" | sudo tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
        #echo "$nexthigherspeed" | tee /sys/devices/system/cpu/cpufreq/policy{0,1,2,3}/scaling_setspeed >/dev/null
#        echo "Speed increased to $nexthigherspeed"

        setspeed "$nexthigherspeed"
        echo -n ">$nexthigherspeed"
        let 'transitions++'
      fi
    else
#      echo 'Doing nothing, between thresholds'
      echo -n '.'
      #let "secondsinbetween+=sleeptime"
      secondsinbetween=$(echo "$secondsinbetween + $sleeptime"|$bc -l)
      #FIXME: if sleeptime is gt 1 then the margin of error is $sleeptime if C-c-ed before the sleep command below! aka secondsinbetween is higher by $sleeptime amount!
    fi

  fi
  sleep "$sleeptime"  #sleep float works
  #let 'timespent_secs+=sleeptime'
  timespent_secs=$(echo "$timespent_secs + $sleeptime"|$bc -l)
  #bc modullo src: https://superuser.com/questions/31445/gnu-bc-modulo-with-scale-other-than-0/720055#720055
  if test "$(echo "define int(x) { oldscale=scale; scale=0; x=x/1; scale=oldscale; return( x ); } define mod(x,y) { oldscale=scale; scale=1000; x = x - y * int(x/y); scale=oldscale; return( x ); } mod($timestemppolled, $breaklongerlines_every_x_polls )"|$bc -l)" -eq "0"; then
    echo
  fi
done
}

#  if test "0$0" == "0$nameofarg0forexiting" -o "1$1" == "1$nameofarg0forexiting"; then #using arg1 because arg0 won't be seen as set even though I used exec! unsure why but see ${HOME}/sandbox/bash/exec
#    read -r -s -p "Exiting... press Enter key"
#    exit 0
#  else
#    echo "\$0 is '$0'"
#  fi

(
  set -e
  #locking from, src: http://www.kfirlavi.com/blog/2012/11/06/elegant-locking-of-bash-program/
  #202 is the file descriptor for the lock file - can't use a var, apparently! (because of the redir occurrence, below)
  #wait 1 sec if cannot acquire lock, then fail if still can't.
  flock --wait 1 --exclusive 202 || (echo 'Already running in another window' ; exit 1)
  set +e
  main
  exit "$ec"
) 202>"${lockfile}"

#rm -- "$lockfile"

