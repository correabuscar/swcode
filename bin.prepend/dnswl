#!/bin/bash

source "/swcode/swcode.bash"

rerunasroot "$@"

DNS_SERVERS_DNSMASQ_FILE="/etc/dnsmasq.d/servers.actual"
DNS_SERVERS=( $( grep -E '^\s*server\s*=\s*[0-9]+.[0-9]+.[0-9]+.[0-9]+\s*' -- "${DNS_SERVERS_DNSMASQ_FILE}" | sed -E 's/^\s*server\s*=\s*([0-9]+.[0-9]+.[0-9]+.[0-9]+)\s*/\1/' ) )
ALLOWED_FILE="/etc/dnsmasq.d/allowed_by_script.conf"
DENIED_FILE="/etc/dnsmasq.d/denied_by_script.conf"

base="$(basename -- "$0")"
if test "$base" == "dnswl"; then
  echo "Whitelisting mode" >&2
  APPEND_TO_FILE="$ALLOWED_FILE"
  what='allow'
elif test "$base" == "dnsbl"; then
  echo "Blacklisting mode" >&2
  APPEND_TO_FILE="$DENIED_FILE"
  what='deny'
else
  echo "!! Unknown basename '$base', aborting." >&2
  exit 4
fi

echo "Found ${#DNS_SERVERS[@]} DNS servers in file '${DNS_SERVERS_DNSMASQ_FILE}': '${DNS_SERVERS[*]}'" >&2
collected_inlist_lines=()

function is_it_in_array() {
  local search_element="$1"
  if test -z "$search_element"; then
    echo "Empty arg supplied to function '${FUNCNAME[0]}'" >&2
    exit 5
  fi
  # Initialize a flag to indicate if the element is found
  #local element_found=0

  # Iterate through the array to check if the element exists
  for element in "${collected_inlist_lines[@]}"; do
    if [[ "$element" == "$search_element" ]]; then
      #element_found=1
      return 0
      #break
    fi
  done
  return 1
}
function already_exists() {
  local expected="$1"
  if test -z "$expected"; then
    echo "Empty arg supplied to function '${FUNCNAME[0]}'" >&2
    exit 6
  fi
  if ! grep -qF "$expected" -- "${APPEND_TO_FILE}" >/dev/null; then
    #aka non-zero exit code ie. not found
    return 1
  fi
  return 0
}

function add_to_dnsmasq_allow_list() {
  local host="$1"
  if test "$#" != "1"; then
    echo "!! You should pass only 1 arg to func '${FUNCNAME[0]}()', you passed $# args as '$*'" >&2
    exit 2
  fi

  for each_DNS_server in "${DNS_SERVERS[@]}"; do
    local expected
    if test "$what" == "allow"; then
      expected="server=/${host}/${each_DNS_server}"
    elif test "$what" == "deny"; then
      expected="address=/${host}/"
      #note that this works the same:
      #expected="server=/${host}/"
      #just don't add anything after the second "/", else it may even allow it, especially if it's 0.0.0.0
    else
      echo "Unhandled type '$what', aborting." >&2
    fi
    #if ! grep -qF "$expected" -- "${APPEND_TO_FILE}" >/dev/null; then
    if ! already_exists "$expected" >/dev/null; then
#      #aka non-zero exit code ie. does not exist
#      #so it's not already allowed/denied, so add it by showing it to stdout!
#      echo "$expected"

      # just in case it's passed more than once as arg, since we didn't add any to the file yet!
      if ! is_it_in_array "$expected"; then
        #aka non-zero exit code ie. not found
        #add it and return
        echo "adding host: '$host'" >&2
        collected_inlist_lines+=( "$expected" )
      else
        echo "duplicate host arg: '$host'" >&2
      fi
    else
      echo "host already in file: '$host'" >&2
    fi
    if test "$what" == "deny"; then
      #no need to do it for each DNS server, because for 'deny' it doesn't depend on them!
      #echo "foo" >&2
      break
    fi
  done
}

if test "$#" == "0"; then
  echo "!! You should pass hostname(s) as arg(s)" >&2
  exit 3
fi

if ! test -f "${APPEND_TO_FILE}"; then
  echo "# Autogenerated by '$0' aka '$(realpath -- "$0")', DO NOT EDIT, just run \`'$0' hostname\`" > "${APPEND_TO_FILE}"
  echo "# for use by dnsmasq, this is file '${APPEND_TO_FILE}'" >> "${APPEND_TO_FILE}"
  echo "#" >> "$APPEND_TO_FILE"
  echo "# Beware that having a hostname here means dnsmasq will $what all its subdomains too!" >> "$APPEND_TO_FILE"
  echo "# Also having a hostname in both allow and in deny lists will make it be allowed(and its subdomains too, unless specific subdomains are only in deny list!)!" >> "$APPEND_TO_FILE"
  echo "#" >> "$APPEND_TO_FILE"
fi

#for tests:
#add_to_dnsmasq_allow_list blah "bla bla"
for each in "$@"; do
  add_to_dnsmasq_allow_list "$each"
done

if test "${#collected_inlist_lines[@]}" -gt 0; then
  #add all changes at once!
  #TODO: ensure it's locked so no two $0 can concurrently append here and make a racy mess!
  echo "${collected_inlist_lines[@]}" | tr ' ' '\n' | tee -a "$APPEND_TO_FILE"
fi

echo "Done, file '$APPEND_TO_FILE' was updated! Now restarting dnsmasq to effectivate changes:"
rc-service dnsmasq restart
#note: reload won't do! needs to be 'restart'

