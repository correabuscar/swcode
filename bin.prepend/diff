#!/usr/bin/env -S PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin:${PATH}" bash

#TODO: detection of only mode changes no contents changed!
#TODO: see how it looks when both mode and contents changed! try to match output to that!
#TODO: show proper output when file is created
#TODO: show proper output when file is deleted!


# args are ignored unless DEBUG env.var. is set to non "0", then they're printed to stderr!
function perr() {
  local args=("$@")
  #return "0" if DEBUG is unset, but don't change it itself!
  #otherwise, if set to anything other than 0, even to empty string, it's enabled!
  #so, DEBUG="" or DEBUG="1" etc. means it's enabled
  #unset DEBUG or DEBUG=0 means it's disabled!
  if test "${DEBUG-0}" != "0"; then
    local debug_enabled=1
  else
    local debug_enabled=0
  fi

  if test "$debug_enabled" == "1"; then
    echo "${args[@]}" >&2
  fi
}

function get_callers_pstree() {
  # Array to store process information
  local -a process_tree=()

  # Set to store processed PIDs
  local -A processed_pids

  # Function to retrieve process information recursively
  function build_process_tree() {
    #shopt -s extglob  # Enable extended globbing
    local pid=$1
    local indent=$2
    #echo "New: $# $*"
    local trimmed_pid
    #trimmed_pid="${pid#"${pid%%[![:space:]]*}"}"   # Remove leading whitespace
    #trimmed_pid="${trimmed_pid%"${trimmed_pid##*[![:space:]]}"}"   # Remove trailing whitespace
    trimmed_pid="${pid#"${pid%%[![:space:]]*}"}"   # trim leading whitespace
    trimmed_pid="${trimmed_pid%"${trimmed_pid##*[![:space:]]}"}"   # trim trailing whitespace
    #echo "trim='$trimmed_pid'"




      # Check if we've already processed this PID to avoid infinite loops
      if [[ -n "${processed_pids[$trimmed_pid]}" ]]; then
        echo "!! Avoided infinite loop for pid '$pid' due to bad coding!" >&2
        return 2
      fi

      # Mark this PID as processed
      processed_pids[$trimmed_pid]=1

      # Read command line arguments from /proc/PID/cmdline into an array
      local cmdline_args=()
      while IFS= read -r -d $'\0' arg; do
        cmdline_args+=("$arg")
      done < "/proc/$trimmed_pid/cmdline"

      # Determine the command (first argument) and its arguments count
      #local cmd="${cmdline_args[0]}"
      local args_count="${#cmdline_args[@]}"

      ## Get process command line
      #local cmd
      ##cmd="$(ps -o cmd= -p "$pid" 2>/dev/null)"
      #cmd="$(ps -o cmd= -p "$trimmed_pid")" # 2>/dev/null)"

      if test "$args_count" -gt "0"; then
        # Store process information in the array
        #process_tree+=("${indent}PID: '$pid' - Command: '$cmd'" )
        #process_tree+=("${indent}'$cmd'" )
        local all_args=""
        for element in "${cmdline_args[@]}"
        do
          # Enclose each element in single quotes and concatenate with the existing out_str
          all_args="${all_args}'${element}' "
        done
        all_args="${all_args% }"
        #used $pid with spaces on purpose - doesn't apply anymore, $pid is trimmed too.
        process_tree+=("${indent}'$pid'-'$args_count'-${all_args}")

          # Find parent PID
          local ppid
          #ppid="$(ps -o ppid= -p "$pid" 2>/dev/null)"
          #ppid="$(ps -o ppid= -p "$trimmed_pid" 2>/dev/null)"
          ppid="$(awk '{print $4}' "/proc/$pid/stat")"
          if test "$ppid" != "0"; then
            local trimmed_Ppid
            trimmed_Ppid="${ppid#"${ppid%%[![:space:]]*}"}"   # Remove leading whitespace
            trimmed_Ppid="${trimmed_Ppid%"${trimmed_Ppid##*[![:space:]]}"}"   # Remove trailing whitespace
            #echo "trim2='$trimmed_Ppid'"


          # Recursively call function for parent process
          #if [ "$trimmed_Ppid" != "1" ] && [ "$trimmed_Ppid" != "$trimmed_pid" ]; then
          build_process_tree "$ppid" "$indent  "
          fi
      fi
    }

  # Start with our own PID
  build_process_tree "$$" ""

  # Print the process tree
  str="Our callers tree:"$'\n'
  for line in "${process_tree[@]}"; do
    #echo "$line"
    str+="${line}"$'\n'
  done
  echo -n "$str"
}

function main() {

  # Trap function to handle errors, this is hit on any command we execute that has non-zero exit code!
  # so we wanna ignore most of those unless they're inside a 'set -e' and 'set +e' block!
  on_error() {
    # shellcheck disable=SC2317
    local ec="$?"
    # else false positive spam:
    # ^-----------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).

    # shellcheck disable=SC2317
    # Check if 'errexit' (set -e) is in the list of enabled options
    if [[ $- == *e* ]]; then
      #so only take this path if 'set -e' was set/used, but not if 'set +e' is on
      #don't use perr for this, because we want this shown no matter what:
      echo "Error (exit code '$ec') occurred in diff wrapper script '$0' at line: '$1'" >&2
      exit 2 #aka trouble
    fi
  }

  # Set the trap to call on_error when an error occurs
  # "ERR Trap: This trap is triggered whenever a command has a non-zero exit status, regardless of whether set -e is enabled or not."
  trap 'on_error $LINENO' ERR

  # eg. "/bin/bash --login" or "/home/user/.cargo/bin/alacritty"
  #local parent_pid="$PPID"
  #local OUR_CALLER="$(ps -o cmd= -p "$parent_pid")"
  local OUR_CALLERS
  OUR_CALLERS="$(get_callers_pstree)"
  #TODO: use this ^ to report whoever tried to call 'diff' aka us, in case the args were unexpected/wrong!

  local diff="/usr/bin/diff"

  if test -z "$diff"; then
    perr "empty \$diff"
    exit 99
  fi

  local AMBIGUOUS_ARG="--ambiguous"
  local THE_UNAMBIGUOUS_ARG="--unambiguous"
  local GIT_DIFF_WANTED="--git-diff"
  #GIT_DIFF_WITH_LESS_WANTED="--git-diff-less"
  local GIT_DIFF_WITH_COLOR_WANTED="--git-diff-color"

  local git_diff_wanted=0
  #pipe_to_less=0
  local color=auto #because colordiff is used! and this can't be used because 'git diff' doesn't tell us when it's displaying the stuff or when redirecting it to file, so we won't know when to turn on/off the colors! 'git diff' uses pager usually which we wouldn't detect as being terminal! but it's not color=never here because when GIT_PAGER is empty or 'cat', we still allow diff to output colors if it goes on the terminal, and it knows then when it's gonna get redirected to NOT show colors!

  local unambiguous=1
  #^ unambiguous by default, which means, don't allow same hunk to can be applied in more than 1 place in the same file!

  # Array to store the remaining arguments
  local remaining_args=()
  local at_saved=("$@")

  # Iterate over the arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      "${AMBIGUOUS_ARG}")
        unambiguous=0
        #^ explicitly not checking if hunks can be applied to more than 1 place in the file.
        shift
        ;;
      "${THE_UNAMBIGUOUS_ARG}")
        unambiguous=1
        #^ explicitly checking if hunks can be applied to more than 1 place in the file.
        shift
        ;;
      "${GIT_DIFF_WANTED}")
        #this is the option that's used as 'git diff' external diff program!
        git_diff_wanted=1
        #^ explicitly not checking if hunks can be applied to more than 1 place in the file.
        shift
        ;;
      "${GIT_DIFF_WITH_COLOR_WANTED}")
        #so, `git diff` pipes to `less` or to $GIT_PAGER, unless set to empty to to "cat"
        #but with this option, then this works:
        #$ GIT_EXTERNAL_DIFF="diff --git-diff-color" GIT_PAGER= git diff |& less
        #to have colors in 'less'
        #but this is bad when redirecting because the colors are kept
        #so never actually using this option!
        git_diff_wanted=1
        color=always
        #^ explicitly not checking if hunks can be applied to more than 1 place in the file.
        shift
        ;;
      #    "${GIT_DIFF_WITH_LESS_WANTED}")
        #    #XXX: no good, this will pipe each file diff-ed to less, instead of all
        #      git_diff_wanted=1
        #      pipe_to_less=1
        #      color=always
        #      #^ explicitly not checking if hunks can be applied to more than 1 place in the file.
        #      shift
        #      ;;
      *)
        # Add argument to remaining_args array
        remaining_args+=("$1")
        shift
        ;;
    esac
  done

  perr "'$0' wrapper script called by PID='$$', PPID='$PPID' with '${#at_saved[@]}' args: '${at_saved[*]}'"$'\n'"and with env.vars. GIT_DIFF_OPTS='$GIT_DIFF_OPTS', GIT_DIFF_PATH_COUNTER='$GIT_DIFF_PATH_COUNTER', GIT_DIFF_PATH_TOTAL='$GIT_DIFF_PATH_TOTAL'"
  perr "$OUR_CALLERS"

  perr "$(id)" #even if 'git' was started as suid root, this external diff cmd won't run as root, but as the normal user that started 'git'
  #GIT_DIFF_PATH_TOTAL is the number of how many diff-ed files will be!
  #GIT_DIFF_PATH_COUNTER is the 1-based counter that's incremented by 1 for each of those diff-ed files! eg. 1 for first and same value as $GIT_DIFF_PATH_TOTAL for last diff-ed file.
  #GIT_DIFF_OPTS
  # Only valid setting is "--unified=??" or "-u??" to set the number of context lines shown when a unified diff
  #  is created. This takes precedence over any "-U" or "--unified" option value passed on the Git diff command
  #  line.
  #XXX: if calling `git diff --unified=10` that arg isn't seen or passed to external diff!(git version 2.45.2), so you need to set it via GIT_DIFF_OPTS! which if set, it overrides the arg!
  #TODO: test for this, find out how: "For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1 parameter, <path>."
  local ec
  #eg. $ GIT_EXTERNAL_DIFF="diff --git-diff" GIT_PAGER= git diff
  if test "$git_diff_wanted" == "1"; then
    #if 7 args:
    #you get something like:
    #path old-file old-hex old-mode new-file new-hex new-mode
    #eg.
    #src/apply.rs /tmp/git-blob-JPvhWI/apply.rs 9b971cf2e82de620a4724a815f3946ed55a57039 100644 src/apply.rs 0000000000000000000000000000000000000000 100644
    perr "$0: git diff is wanted, '${#remaining_args[@]}' args (path old-file old-hex old-mode new-file new-hex new-mode) as follows: '${remaining_args[*]}'"
    #if 9 args(eg. used git diff --no-index /tmp/a /tmp/Xorg.0.log ):
    #the 8th is /tmp/Xorg.0.log
    #the 9th is "index cef083220..b68c75fe1 100644\n" (i think)
    #for this:
    #/tmp/a /tmp/a 0000000000000000000000000000000000000000 100644 /tmp/Xorg.0.log 0000000000000000000000000000000000000000 100644 /tmp/Xorg.0.log index cef083220..b68c75fe1 100644
    #
    local file_path="${remaining_args[0]}"
    local old_file_path="${file_path}" #doneFIXME: unsure if this is the one here, in all cases!
    local new_file_path
    if test "${#remaining_args[@]}" == "9"; then
      #technically 4th index aka 5th arg would work too!
      new_file_path="${remaining_args[7]}"
      if test "$new_file_path" != "${remaining_args[4]}"; then
        perr "Assumption about args passed by 'git diff' to our diff wrapper aka '$0' are wrong because 5th and 8th are aren't the same!"
        exit 2 #aka trouble
      fi
    else
      new_file_path="${file_path}"
    fi
    local old_file_hash
    local new_file_hash
    local old_file="${remaining_args[1]}"
    if test "$old_file" == "/dev/null"; then
      old_file_path="$old_file"
      old_file_hash="0000000000000000000000000000000000000000"
    else
      #FIXME: this will fail to read the file if 'git' was suid root, because this diff wrapper ends up running as the user that started 'git', not as suid root (possibly a feature of running child processes by the OS, or 'git' drops privs for executed child processes?)
      set -e
      old_file_hash="$(git hash-object -t blob -- "$old_file")"
      set +e
    fi
    local new_file="${remaining_args[4]}"
    if test "$new_file" == "/dev/null"; then
      new_file_path="$new_file"
      new_file_hash="0000000000000000000000000000000000000000"
    else
      set -e
      new_file_hash="$(git hash-object -t blob -- "$new_file")"
      set +e
    fi
    #TODO: extract this 16 value into a constant/var
    local old_file_short_hash="${old_file_hash:0:16}"
    local new_file_short_hash="${new_file_hash:0:16}"

    local new_file_mode="${remaining_args[6]}"
    #wtwTODO: do I have to do this prefixed slashes reduction for the normal files? or is there some gimmick where multiple ones may act differently?! WARNING: if u do this make sure u do it only for those that already have for sure a / prefixing them! or if deciding to slim down all /-es then it's fine.
    shopt -s extglob #"When you enable extglob in a script and then call another script from within that script, the extglob setting will be active in the called script as well." -chatgpt-4o
    # Trim down consecutive slashes using extglob
    #       ${parameter//pattern/string}
    #"If there are two slashes separating parameter and pattern, all matches of pattern are replaced with string."
    #"If the extglob shell option is enabled using the shopt builtin, the shell recognizes  several  extended  pattern
    # matching operators.  In the following description, a pattern-list is a list of one or more patterns separated by
    # a |.  Composite patterns may be formed using one or more of the following sub-patterns:"
    # +(pattern-list)
    #   Matches one or more occurrences of the given patterns
    old_file_path="${old_file_path//+(\/)/\/}"
    new_file_path="${new_file_path//+(\/)/\/}"
    #now carry on:

    #doneFIXME: only add "/" if it doesn't already have one: removing all / that are prefixing it if they already exist.
    local old_file_shown
    if test "$old_file" != "/dev/null"; then
      old_file_shown="a/${old_file_path##+(/)}"
    else
      old_file_shown="$old_file"
    fi
    local new_file_shown
    if test "$new_file" != "/dev/null"; then
      new_file_shown="b/${new_file_path##+(/)}"
    else
      new_file_shown="$new_file"
    fi
    #if [ -t 1 ]; then #this is useless because 'git diff' pipes to pager(eg.'less') thus this is never true in that case.
    #  perr "Output is a terminal!"
    #fi

    #the following works but isn't needed or done by 'git diff', only by 'diff' itself:
    ## Get the modification time with the fractional seconds
    #TIMESTAMP=$(stat -c '%y' "$old_file")
    #
    ## Extract the date, time, and fractional seconds
    #DATE=$(echo $TIMESTAMP | awk '{print $1}')
    #TIME=$(echo $TIMESTAMP | awk '{print $2}' | cut -d. -f1)
    #FRACTIONAL=$(echo $TIMESTAMP | awk '{print $2}' | cut -d. -f2)
    #
    ## Get the timezone information
    #TIMEZONE=$(date +%z)
    #
    ## Combine the results into the desired format
    #FORMATTED_TIMESTAMP="$DATE $TIME.$FRACTIONAL $TIMEZONE"
    #

    #cp -- "$old_file" /tmp/foo.rs
    #command_array=("$diff" "--color=$color" -up --label "a/$old_file_path $FORMATTED_TIMESTAMP (actually time of the diff)" --label "b/$new_file_path " -- "$old_file" "$new_file")
    #local RE="^\s*fn\s+\w+\s*(<[^>]*>)?\s*\([^)]*\)"
    local command_array
    # shellcheck disable=SC2206
    # needs to be outside here, on the var, to disable it.
    # (warning): Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a.
    command_array=("$diff"
      #"--show-function-line=$RE" #nvm, wtw it was doing was better, or this has no effect!
      "--color=$color"
      "-up"
      #XXX: if you use -u or -uNUM the minimum is gonna be capped at 3, even if NUM is < 3 ! but with a manual patch(its name below) a later arg (other than -u due to what i just mentioned) like -UNUM or -U NUM or --unified=NUM can decrease the already set context even below 3!
      #-p
      #--unified=3
      #XXX: if you use any value for unified here beforehand, even -u which means 3, or anything any value, this value becomes the minimum value that can be used even if you, in a later arg, override it with a lower value, it won't set it lower! actually imma have to patch it so it does use later overrides! /patches/portage/sys-apps/diffutils.reused/0500_use_context_length_specified_last.patch
      --label "$old_file_shown"
      --label "$new_file_shown"
      #XXX: can't quote $GIT_DIFF_OPTS with double quotes else it can be an empty arg! NOTE: for this to properly work, it uses git patch /patches/portage/dev-vcs/git.reused/0300_git_set_env_var_for_context_length.patch for git version 2.45.2
      #XXX: it's at the end here so it can override any of our set args
      ${GIT_DIFF_OPTS}
      -- "$old_file" "$new_file")
    #  if test "$pipe_to_less" == "1"; then
    #    #command_array+=( "|" "less" ) #won't work!
    #    set -vx
    #    "${command_array[@]}" | less; ec="${PIPESTATUS[0]}"
    #    set +vx
    #  else
    perr "Actually ended up running the following '${#command_array[@]}' args line:"$'\n'"${command_array[*]}"
    #TODO: these 2 lines should be colored if colors:
    #same color as this:
    #ESC[1m--- a/CHANGELOG.mdESC[0m
    #that's `tput bold` and some form of `tput sgr0` which is ESC(BESC[m, this latter one being \E[0m where 0 is missing.
    echo "diff --git $old_file_shown $new_file_shown"
    echo "index ${old_file_short_hash}..${new_file_short_hash} ${new_file_mode}"
    #    set -vx
    "${command_array[@]}" ; ec="${PIPESTATUS[0]}"
    #    set +vx
    #  fi
    if test "$ec" == "0"; then
      #that's weird, it shouldn't ever 'diff' 2 files with same content
      ec="2" #aka trouble
    elif test "$ec" == 1; then
      #yeah we knew they're different, but we can't exit code 1, or 'git diff' will stop
      ec="0"
    fi
  else
    perr "$0: normal diff, '${#remaining_args[@]}' args: '${remaining_args[*]}'"
    #  set -vx
    #  "$diff" "${remaining_args[@]}" ; ec="$?"
    #  set +vx
    local command_array=(
    "$diff" "${remaining_args[@]}"
  )
  perr "${command_array[@]}"
  #    set -vx
  "${command_array[@]}" ; ec="${PIPESTATUS[0]}"
  #    set +vx
  fi

  exit "$ec"
}

main "$@"

