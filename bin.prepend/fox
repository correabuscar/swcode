#!/bin/bash

source "/swcode/swcode.bash"
set_xfce4_terminal_title "`basename "$0"` in pwd='`pwd`'"

#XXX: any env. vars should be set in the --setenv of bwrap (see below), else they'll be cleared inside bwrap!
#export LANG=C

export MOZ_ENABLE_WAYLAND=1
#^ https://wiki.gentoo.org/wiki/Wayland#Running_Mozilla_Firefox_in_Wayland_mode

#export MOZ_DISABLE_RDD_SANDBOX=1  #https://bugzilla.mozilla.org/show_bug.cgi?id=1519608#c1  or media.rdd-process.enabled=false in about:config https://bugzilla.mozilla.org/show_bug.cgi?id=1515982#c8
export JSGC_DISABLE_POISONING=1
#GC Poisoning
#
#Many Firefox builds have a diagnostic tool that causes crashes to happen sooner and produce much more actionable information, but also slow down regular usage substantially. In particular, "GC poisoning" is used in all debug builds, and in optimized Nightly builds (but not opt Developer Edition or Beta builds). The poisoning can be disabled by setting the environment variable
#
#    JSGC_DISABLE_POISONING=1
#
#before starting the browser.

#attempt:don't autoload some system packages placed plugins! - this doesn't work
#so this must be inexistent path
export MOZ_PLUGIN_PATH="/cS77ELTjgJWYoI0RzSKq${RANDOM}${SRANDOM}" #tried: /
#^ but this is the default:export MOZ_PLUGIN_PATH="/usr/lib/mozilla/plugins", supposedly, when mozilla-common package is installed!
#XXX: to that path firefox adds(internally): ":/usr/lib64/mozilla/plugins" which on Gentoo atm doesn't exist but still, defeats the purpose of what I wanted to do here!
if test -d "/usr/lib64/mozilla/plugins"; then
  echo "!! there's a plugins dir /usr/lib64/mozilla/plugins which will be used by firefox (unless bwrap-ed)" >&2
  exit 1
fi
if test -d "/usr/lib{,64}/mozilla"; then
  echo "!! there's a mozilla dir in one of /usr/lib{,64}/mozilla which will be used by firefox (unless bwrap-ed)" >&2
  exit 1
fi

#fflogfile="/tmp/ff.out.log"
#exec > "$fflogfile" 2>&1
downloadsdironhost="${HOME}/Downloads.bwrapped"
mkdir -p -- "${downloadsdironhost}"
logsdir="/tmp/firefox.logs"
mkdir -- "$logsdir"


if test -n "$UID" -a "$UID" != "1000" -o "$UID" != "$(id -u || /usr/bin/id -u)"; then
  echo "UID aka user id isn't 1000 or isn't same as 'id -u', this is unexpected but should still work! UID=$UID, id -u is $(id -u || /usr/bin/id -u)" >&2
  echo "actually, bailing out for now..."
  exit 1
fi

#if not ran as $0=='foxdebug' then we bubblewrap(package) it, otherwise prefix=() here!
# shellcheck disable=SC2002,SC2207
prefix=(
  bwrap
  --ro-bind /usr /usr
  #for ArchLinux:
  #--symlink usr/lib64 /lib64
  #for Gentoo(or else "bwrap: execvp firefox: No such file or directory"):
  --ro-bind /bin /bin
  --ro-bind /sbin /sbin
  --ro-bind /lib /lib
  --ro-bind /lib64 /lib64
  #end Gentoo.

  --proc /proc
  --dev /dev
  --dev-bind /dev/log /dev/log
  # --dev-bind /dev/log /dev/log  required so that the dns lookup requests can be logged (via openlog() and syslog() from glibc, to host's dmesg!), because --dev /dev  just uses a new one I guess.
  --unshare-pid
  --unshare-user
  #no net with this(only 'lo' interface is up, no routes, but also no root to can set them up)
  #--unshare-net
  --share-net
  --unshare-ipc
  --unshare-uts
  --unshare-cgroup
  --unshare-pid
  #--disable-userns --assert-userns-disabled #XXX: using this makes about:support show "User Namespaces" "false" under sandbox

  --clearenv
  --setenv "HOME" "${HOME:=/home/user}"
  --setenv "USER" "${USER:="user"}"
  --setenv "LOGNAME" "${LOGNAME:="$USER"}"
  --setenv "UID" "${UID:="$(id -u || /usr/bin/id -u)"}" #the $() executes only when needed aka if null/unset env. var!
  --setenv "EUID" "${EUID:="$UID"}"
  #GROUPS=()
  --setenv "XDG_CACHE_HOME" "${XDG_CACHE_HOME:=/tmp}"
  --setenv "XDG_CONFIG_DIRS" "${XDG_CONFIG_DIRS:=/etc/xdg:/usr/share}"
  --setenv "XDG_CONFIG_HOME" "${XDG_CONFIG_HOME:=${HOME}/.config}"
  --setenv "XDG_DATA_DIRS" "${XDG_DATA_DIRS:=/usr/local/share:/usr/share}"
  --setenv "XDG_DATA_HOME" "${XDG_DATA_HOME:=${HOME}.local/share}"
  --setenv "XDG_RUNTIME_DIR" "${XDG_RUNTIME_DIR:=/run/${USER}/${UID}}"
  --setenv "XDG_SEAT" "${XDG_SEAT:=seat0}"
  --setenv "XDG_SESSION_CLASS" "${XDG_SESSION_CLASS:=user}"
  --setenv "XDG_SESSION_ID" "${XDG_SESSION_ID:=2}"
  --setenv "XDG_SESSION_TYPE" "${XDG_SESSION_TYPE:=tty}"
  --setenv "XDG_VTNR" "${XDG_VTNR:=1}"
  #TODO: see which XDG_* aren't actually needed!
  --setenv "XAUTHORITY" "${XAUTHORITY:=${HOME}/.Xauthority}"
  --setenv "TMPDIR" "${TMPDIR:=/tmp}"
  #TERM=alacritty
  #TERMINFO=/home/user/.terminfo
  --setenv "RUST_BACKTRACE" "${RUST_BACKTRACE:=1}"
  --setenv "PWD" "${PWD:=/tmp}"
  #OPENGL_PROFILE=xorg-x11
  --setenv "MOZ_PLUGIN_PATH" "${MOZ_PLUGIN_PATH:="/cS77ELTjgJWYoI0RzSKq${RANDOM}${SRANDOM}"}"
  --setenv "JSGC_DISABLE_POISONING" "${JSGC_DISABLE_POISONING:=1}"
  --setenv "MOZ_ENABLE_WAYLAND" "${MOZ_ENABLE_WAYLAND:=1}"
  #--setenv "LADSPA_PATH" "${LADSPA_PATH:=/usr/lib64/ladspa}" #used by ffmpeg(and sox) at least which is used by firefox FIXME: however I'm not sharing this via --bind !
  #QT_PLATFORM_PLUGIN=lxqt
  #QT_QPA_PLATFORMTHEME=lxqt
  #GSETTINGS_BACKEND=dconf
  #GTK2_RC_FILES=/home/user/.gtkrc-2.0
  #GTK_CSD=0
  #GTK_MODULES=canberra-gtk-module
  #GTK_OVERLAY_SCROLLING=0
  #GTK_THEME=Breeze:Dark
  --setenv "DISPLAY" "${DISPLAY:=":0"}"
  #console.warn: services.settings: Ignoring preference override of remote settings server. Will use NOT use the provided aka lazy.gServerURL:' https://services.settings.server.firefox_blocked_domain.tld/firefox.settings.services.mozilla.com/v1 ', which is set in the about:config in 'services.settings.server' but rather the hardcoded aka AppConstants.REMOTE_SETTINGS_SERVER_URL:' https://firefox.settings.services.mozilla.com/v1 '
  #console.warn: services.settings: Allow by setting MOZ_REMOTE_SETTINGS_DEVTOOLS=1 in the environment
  --setenv "MOZ_REMOTE_SETTINGS_DEVTOOLS" "${MOZ_REMOTE_SETTINGS_DEVTOOLS:=1}"
  #Mozilla's logging system uses numeric levels for logging:
#    0: Fatal
#    1: Error
#    2: Warning
#    3: Info
#    4: Debug
#    5: Verbose
#  --setenv "MOZ_LOG" "pipnss:5,nsSecureBrowserUI:5,*:5"
#  --setenv "MOZ_LOG_FILE" "${logsdir}/firefox.log"
#  XXX: commented out, as it's for only when needed



  --setenv "LANG" "${LANG:=en_US.utf8}" #the := also sets LANG if it's unset or null, as opposed to :- which doesn't.

  #--setenv "NSS_DEFAULT_DB_TYPE" "sql:/etc/pki/nssdb" #no effect:tell firefox to use the global cert database instead of a local one that it re-makes if doesn't exist, in each ff profile dir. that /etc/pki/nssdb/ dir gets regenerated after each emerge of dev-libs/nss via /etc/portage/env/dev-libs/nss
  #--setenv "NSS_DEFAULT_DB_TYPE" "sql"
  #in about:config the security.enterprise_roots.enabled preference to set its value to true. This enables Firefox to use the global NSS database (nssdb) specified by the environment variable MOZ_NSS_DIR or by default paths recognized by Firefox.
  #--setenv "MOZ_NSS_DIR" "/etc/pki/nssdb" #no effect!

  --ro-bind /etc /etc

  #--ro-bind /run /run  #this makes the other below /run/user/1000/ readonly too!
  #--ro-bind /var /var
  #--bind /run /run  #yes this makes the sound work in firefox/youtube, but need a more limited one:
  #yes this makes the youtube audio work:
  #--ro-bind "/run/user/$(id -u)/pulse" "/run/user/$(id -u)/pulse"
  --ro-bind "${XDG_RUNTIME_DIR:="/run/${USER:="user"}/${UID}"}/pulse" "${XDG_RUNTIME_DIR}/pulse"
  #prev. tries:
#  --ro-bind /run/udev /run/udev
#  --ro-bind /run/systemd /run/systemd
#  --ro-bind /run/tmpfiles.d /run/tmpfiles.d
#  --ro-bind /run/initctl /run/initctl
#  --ro-bind /run/utmp /run/utmp
#  --ro-bind /run/media /run/media
#  #--bind /var/lock /var/lock
#  --bind /run/lock /run/lock
#  --bind /run/dmeventd-server /run/dmeventd-server
#  --bind /run/dmeventd-client /run/dmeventd-client


  --ro-bind "${HOME}/.config/mimeapps.list" "${HOME}/.config/mimeapps.list"
  #^ because this ^ is a symlink to:
  --ro-bind "${HOME}/bin/confHOME/${HOME}/.config/mimeapps.list" "${HOME}/bin/confHOME/${HOME}/.config/mimeapps.list"

  --ro-bind /swcode/bin.prepend/fox /swcode/bin.prepend/fox
  --ro-bind /swcode /swcode
  #^ it's $0
  --tmpfs /tmp
  --tmpfs /var/tmp
  --bind "$logsdir" "$logsdir"
  --bind "$downloadsdironhost" "${HOME}/Downloads/"

  #the profiles dir and using profile-sync-daemon aka psd(puts them into /run/user/)
  --bind "${HOME}/.mozilla" "${HOME}/.mozilla"
  --bind "${HOME}/bin/confHOME/${HOME}/.mozilla/firefox/profiles.ini" "${HOME}/bin/confHOME/${HOME}/.mozilla/firefox/profiles.ini"

  #!bind the actual profile dirs:

  #This is for when using profile-sync-daemon (which requires systemd):
  #$(cat /home/user/.mozilla/firefox/profiles.ini | grep '^Path' | cut -f2 -d'=' | xargs -P1 -I{} -- echo "--bind /run/user/$(id -u)/user-firefox-{} /run/user/$(id -u)/user-firefox-{}") #should get: --bind /run/user/1000/user-firefox-dqoq5his.x /run/user/1000/user-firefox-dqoq5his.x  AND (next line): --bind /run/user/1000/user-firefox-t1j6ysv1.dd /run/user/1000/user-firefox-t1j6ysv1.dd  (assuming two profiles were found!)
  #nvmFIXME: unsure which 'user' (text) is the username , possibly only the one in 'user-firefox-profilenamehere', but NOT also the one in "/run/user/`id -u`/"


  #!done binding actual profile dirs

  #Sandbox: /tmp/.X11-unix/X0 is inaccessible (No such file or directory); can't isolate network namespace in content processes
  --bind /tmp/.X11-unix/X0 /tmp/.X11-unix/X0
  #--bind /tmp /tmp
  #--ro-bind /home/user /home/user

  #TODO: replace with env.var $HOME
  #allow addons install:
  --ro-bind "${HOME}/SOURCE/browser.stuff/both/uBlock/uBlock/dist/build" "${HOME}/SOURCE/browser.stuff/both/uBlock/uBlock/dist/build"
  --ro-bind "${HOME}/SOURCE/browser.stuff/both/uMatrix/uMatrix/dist/build" "${HOME}/SOURCE/browser.stuff/both/uMatrix/uMatrix/dist/build"
  #XXX must use same path or else ./go script from eg. /home/user/SOURCE/browser.stuff/both/uBlock/go will point to wrong path when attempting to auto-install the just compile addon!
  --ro-bind "${HOME}/SOURCE/browser.stuff/both/https-everywhere/https-everywhere/pkg" "${HOME}/SOURCE/browser.stuff/both/https-everywhere/https-everywhere/pkg"
  --ro-bind "${HOME}/SOURCE/browser.stuff/both/decentraleyes" "${HOME}/SOURCE/browser.stuff/both/decentraleyes"
  --ro-bind "${HOME}/SOURCE/browser.stuff/firefox.stuff/darkreader" "${HOME}/SOURCE/browser.stuff/firefox.stuff/darkreader"
  --ro-bind "${HOME}/SOURCE/browser.stuff/firefox.stuff/Cookie-AutoDelete.ff.xpi" "${HOME}/SOURCE/browser.stuff/firefox.stuff/Cookie-AutoDelete.ff.xpi"
  #^ that's a dir not a file; contains an .xpi file tho.
  --ro-bind "${HOME}/SOURCE/browser.stuff/firefox.stuff/tst/treestyletab/webextensions" "${HOME}/SOURCE/browser.stuff/firefox.stuff/tst/treestyletab/webextensions"
  #treestyletab-we.xpi"
  --ro-bind "${HOME}/SOURCE/browser.stuff/both/rust-search-extension/rustsearchextension.xpi" "${HOME}/SOURCE/browser.stuff/both/rust-search-extension/rustsearchextension.xpi"

  #--setenv DISPLAY "$DISPLAY" #not needed!
  #"Error: cannot open display: :0" unless I do this:
  --ro-bind "$XAUTHORITY" "$XAUTHORITY" # /home/user/.Xauthority /home/user/.Xauthority

  # TODO: see if ever need this dbus thingy, maybe to start pdf viewer (if ff one is disabled)
  # XXX: env. var. DBUS_SESSION_BUS_ADDRESS=unix:path=/tmp/dbus-qGfobek3B8,guid=cd22e3bcc15ccc7076a0d3cf65e86edf
#  --bind /run/dbus /run/dbus
#  #--bind /run/dbus /run/dbus
  #"(firefox:2): dbind-WARNING **: 05:22:03.720: Couldn't connect to accessibility bus: Failed to connect to socket /tmp/dbus-m4GrDaGXQR: No such file or directory" unless I do this:
  #--bind /tmp/dbus-* /tmp/dbus-* #should expand to only 1 file! FIXME: is this in ~/.cache/ ? which symlinks to /tmp for me now btw. Well it seems to be /run/user/1000/at-spi/bus_0 as per ps axuw|grep dbus
  #--bind /tmp/session-bus/* /tmp/session-bus/* #apparently this is dbus file in gentoo now? 25may2022   this is dbus related but i dno if I need this? TODO it does refer to /tmp/dbus-* file but that file isn't created yet or ever? instead this one is /run/user/1000/at-spi/bus_0
  #--ro-bind "${XDG_RUNTIME_DIR}/at-spi" "${XDG_RUNTIME_DIR}/at-spi" #so this is dbus now on Gentoo 25may2022 ie. /run/user/1000/at-spi/bus_0 (should be just this file) well it's accessibility bus so not dbus!  FIXME: this shouldn't be ro ?
  #XXX: so this ^ is: [2, Main Thread] WARNING: Couldn't connect to accessibility bus: Failed to connect to socket /run/user/1000/at-spi/bus_0: No such file or directory: 'glib warning', file /var/tmp/portage/www-client/firefox-123.0/work/firefox-123.0/toolkit/xre/nsSigHandlers.cpp:187
  #(firefox-default:2): dbind-WARNING **: 11:23:02.649: Couldn't connect to accessibility bus: Failed to connect to socket /run/user/1000/at-spi/bus_0: No such file or directory


  )

  ffprofilesdirsbasenames=(
    #ie. tw26lehq.default zo5gqb5l.default-release
    $(cat "${HOME}/.mozilla/firefox/profiles.ini" | grep '^Path' | cut -f2 -d'=' | xargs -P1 -I{} -- echo "{}")
  )

escape_for_sed() {
  local arg="$1"
  if test -z "$1"; then
    echo "empty arg passed to escape_for_sed()" >&2
    exit 3
  fi
  sed 's/[][\/$*.^|()]/\\&/g' <<< "$arg"
}

getprofilesfullpathdirs_aftermanglefor_foxelem() {
  #echo "hi" >&2
  local bname="$1"
  if test -z "$bname"; then
    echo "empty first arg (bname) passed to getprofilesfullpathdirs_aftermanglefor_foxelem()" >&2
    exit 3
  fi
  shift 1
  #firstarg and secondarg here referr to: --bind $firstarg $secondarg
  local secondarg="$1"
  local firstarg="$secondarg"
  if test -z "$secondarg"; then
    echo "empty second arg (what to replace aka full profile dir name) passed to getprofilesfullpathdirs_aftermanglefor_foxelem()" >&2
    exit 3
  fi

  local normalprofilesubstring=".default-release"

  if test "$bname" == "foxelem"; then
    #if [ "$bname" == "foxelem" ]; then
    if [[ "$secondarg" == *"$normalprofilesubstring"* ]]; then
      #rename main profile to different name in the first arg of --bind $1 $2
      local normalprofilesubstring_for_sed="$(escape_for_sed "$normalprofilesubstring" )"
      local replacementprofilesubstring_forsed="$(escape_for_sed "${normalprofilesubstring}.forElementManuallyHandledbyfoxscript")"
      #^ ie ".default-release.forElementManuallyHandledbyfoxscript " notice the space at the end!
      #echo "$(echo "!$normalprofilesubstring_for_sed!")" >&2
      #echo "$(echo "!$replacementprofilesubstring_forsed!")" >&2
      #double expansion below:
      #set -e #we don't want this because then we don't know why it exited
      firstarg="$(echo "$secondarg" | sed -e "s/${normalprofilesubstring_for_sed}/${replacementprofilesubstring_forsed}/" )" #replace only the first
      #exit 1
      #echo "!$firstarg!" >&2
      #set +e
      if test "$firstarg" == "$secondarg" -o -z "$(echo -n "$firstarg" | sed -e 's/^[[:space:]]*//; s/[[:space:]]*$//' )"; then #the end test checks if it is empty if trimmed leading+trailing spaces from it
        echo "Replacement failed for first arg for --bind, initially being '$secondarg' and became '$firstarg'(not the expected one) for the '$bname' profile dir name" >&2
        exit 2
      fi
    #else #it's the other profile(s) which we don't replace
    #  firstarg="$secondarg"
    fi
  #elif test "$bname" == "fox"; then
    #firstarg="$secondarg"
    #already set!
  #else
  elif test "$bname" != "fox"; then
    echo "basename must be one of two values(fox, foxelem), else it might use default profile without you realizing it" >&2
    exit 2
  fi
  echo "$firstarg $secondarg"
}
  #TODO: this is a mess :)) maybe use something else, like python? the fail checks are still needed tho!
  set -e  #needed for the "exit 2" below inside the $() to work here in parent bash!
  bname="$(basename "$0")"
  ffprofilesbinds=(
    #this is for when using openrc on Gentoo (auto adds all profiles):
    #$(cat "${HOME}/.mozilla/firefox/profiles.ini" | grep '^Path' | cut -f2 -d'=' | xargs -P1 -I{} -- echo "--bind ${HOME}/.mozilla/firefox/{} ${HOME}/.mozilla/firefox/{}")
    #FIXME: yes profile names(and paths here) must not contain spaces(and potentialy other stuff too) - unsure if firefox allows spaces in profile name or not tho!
    $(for each in "${ffprofilesdirsbasenames[@]}"; do
      fullprofiledir="${HOME}/.mozilla/firefox/${each}";
      set -e #for exit 2 inside the $(funccallhere args) to work!
      retoornedarray=( $(getprofilesfullpathdirs_aftermanglefor_foxelem "$bname" "$fullprofiledir") )
      set +e
      firstarg="${retoornedarray[0]}"
      secondarg="${retoornedarray[1]}"
      if test -z "$firstarg"; then
        echo "failed, firstarg was returned empty1" >&2
        exit 4
      fi
      if test -z "$secondarg"; then
        echo "failed, secondarg was returned empty1" >&2
        exit 4
      fi

      #XXX: we wanna avoid any stdout output, but stderr should be ok(not double checked)
      if ! diff -qup "/swcode/data/user.js" "${firstarg}/user.js">/dev/null; then
        #if here, they're different
        cp -a -v -f -T -- "/swcode/data/user.js" "${firstarg}/user.js" >/dev/null || exit 88
      fi

      #TODO: test so the args don't have spaces and other bad stuff here
      echo "--bind ${firstarg} ${secondarg}"; #secondarg is what's seen inside bwrap!
      #XXX: so here we get this (for profile dir):
      #--bind /home/user/.mozilla/firefox/zo5gqb5l.default-release/.forElementManuallyHandledbyfoxscript /home/user/.mozilla/firefox/zo5gqb5l.default-release
      #--bind /home/user/.mozilla/firefox/tw26lehq.default /home/user/.mozilla/firefox/tw26lehq.default
      #notice how one of the two lines has only the first arg replaced!
    done)
  )
  #$HOME is set in the $prefix array if it wasn't already(which is unlikely)
  #$HOME/.cache is symlink to /tmp thus the rest of the child dirs don't exist.
  ffprofilescachesbinds=(
    $(for each in "${ffprofilesdirsbasenames[@]}"; do
      fullprofilecachedir="${HOME}/.cache/mozilla/firefox/${each}"
      firstarg="$fullprofilecachedir"
      #doneTODO: do I need this dir? idno but happens on each startup now(07march2024)//  Error: Could not get children of file(/home/user/.cache/mozilla/firefox/zo5gqb5l.default-release/thumbnails) because it does not exist! err is from leaving ctrl+shift+J open and firefox is restarted.

      set -e #for exit 2 inside the $(funccallhere args) to work!
      retoornedarray=( $(getprofilesfullpathdirs_aftermanglefor_foxelem "$bname" "$fullprofilecachedir") )
      set +e
      firstarg="${retoornedarray[0]}"
      secondarg="${retoornedarray[1]}"
      if test -z "$firstarg"; then
        echo "failed, firstarg was returned empty2" >&2
        exit 4
      fi
      if test -z "$secondarg"; then
        echo "failed, secondarg was returned empty2" >&2
        exit 4
      fi
      #TODO: test so the args don't have spaces and other bad stuff here
      mkdir -p -- "${firstarg}/thumbnails" >/dev/null
      echo "--bind ${firstarg} ${secondarg}"; #secondarg is what's seen inside bwrap!
      #echo "--bind ${fullprofilecachedir} ${secondarg}";
      #XXX: so here we get this (for .cache subdir):
      #--bind /home/user/.cache/mozilla/firefox/zo5gqb5l.default-release/.forElementManuallyHandledbyfoxscript /home/user/.cache/mozilla/firefox/zo5gqb5l.default-release
      #--bind /home/user/.cache/mozilla/firefox/tw26lehq.default /home/user/.cache/mozilla/firefox/tw26lehq.default
      #notice how one of the two lines has only the first arg replaced!
    done)
  )
  set +e
#  this is obsoleted now:
#  #this is after the caches dirs so that i can clear the cache when *.default-release.forElementManuallyHandledbyfoxscript is used since it has same name as the normal profile, can't be sharing same cache, even tho they will now share same cache dir hmm... doneFIXME: well this blows. so then I can't use .cache at all. because both fox and foxelem could be running at the same time, ... guess I've to use renamed cache dir too just like profile dir.
#  if test "$bname" == "foxelem"; then
#    #done: find an automatic way to do this:
#    #FIXME: there can't be spaces in the profile name or paths!
#    #XXX: must replace only the first occurence! the second one must be same dir, because it replaces the profile dir only, it doesn't rename the profile (can't get a new profile name manually for some reason - besides this is safer too)
#    ffprofilesbinds=(
#      $(echo "${ffprofilesbinds[@]}" | sed -e 's/\.default-release /.default-release.forElementManuallyHandledbyfoxscript /')
#    )
#    ffprofilescachesbinds=(
#      $(echo "${ffprofilescachesbinds[@]}" | sed -e 's/\.default-release /.default-release.forElementManuallyHandledbyfoxscript /')
#    )
#    #should get something like this:
#    #  --bind /home/user/.mozilla/firefox/tw26lehq.default /home/user/.mozilla/firefox/tw26lehq.default
#    #  --bind /home/user/.mozilla/firefox/zo5gqb5l.default-release.forElementManuallyHandledbyfoxscript/ /home/user/.mozilla/firefox/zo5gqb5l.default-release
#  elif test "$bname" != "fox"; then
#    echo "basename must be one of two values(fox, foxelem), else it might use default profile without you realizing it" >&2 
#    exit 2
#  fi


  #no more args added after this!
  prefix+=(
    ${ffprofilesbinds[@]}
    ${ffprofilescachesbinds[@]}
    --
  )


#XXX --no-remote  means always start new instance! eg. if firefox is already running, a new one will be started!
extra=(-P "$RANDOM" "$@")  #must be at the end, else it will take the url as an arg and think it's the profile name! or maybe -P -  works? yep, that works! ok, it doesn't work(again, oddly enough) unless I do: -P - -- fullpathtofile.xpi
#so, can't add -P at the end, in case of "fox -- url" callers!  great it works with random: -P 4567 url 
gdbcmdsfile='/tmp/ff.gdbcmdsfile'
if test "${0##*/}" == "foxdebug"; then
  prefix=(gdb -e)
  cat > "$gdbcmdsfile" <<EOF
set pagination off
run ${extra[@]}
EOF
#FIXME: ^ ff args with spaces(in the 'run' line) become multiple args, eg. "a ha" becomes "a" "ha" (no quotes)

#  echo "run ${extra[@]}" > "$gdbcmdsfile"
  extra=(-x "$gdbcmdsfile")
fi

filterout=(
stdbuf -o0 -- cat  #works the same as just 'cat' here, ie. buffered by line, that is, unless '\n' is encountered it's buffered! when '\n' then it prints it!

#sed --unbuffered -re '/^.*(VERBOSE1:gpu_channel.cc\([0-9]+\)\] (received|sending) message @|Cannot serialize binary value.|Styling master document from stylesheets defined in HTML Imports is deprecated).*$/d'
)
#taill=(
#tail
#"--follow=name"
#"$fflogfile"
#)

sudo --remove-timestamp
set -x
export RUST_BACKTRACE=1
#pushd /tmp && "${prefix[@]}" /bin/bash
pushd /tmp && "${prefix[@]}" /usr/bin/firefox "${extra[@]}" 2>&1 | "${filterout[@]}" |sed --unbuffered -re "s/(FATAL|ERROR|WARN|!! |\\[end of stack trace\\]|^#|Extension error:|JavaScript error:|Exception stack|^Current stack)(.*$)/$(tput setab 1)\\1\\2$(tput sgr0)/g" | sed --unbuffered -re "s/^(! )([^ ]*.*$)/$(tput setab 4)\\1\\2$(tput sgr0)/g"
popd

